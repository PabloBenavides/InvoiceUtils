/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.rubik.desk.invoiceutils.gui;

import com.rubik.Base.PartidaObjectBase;
import com.rubik.desk.invoiceutils.model.Emisor;
import com.rubik.desk.invoiceutils.model.FacturaImpresion;
import com.rubik.desk.invoiceutils.model.Receptor;
import com.rubik.desk.invoiceutils.tmodel.TModelFactura;
import com.rubik.file.FileTypeFilter;
import com.rubik.file.RubikSerealize;
import com.rubik.manage.ManageDialogsSwing;
import com.rubik.manage.ManageNumbers;
import com.rubik.manage.NumberToText;
import com.rubik.model.Factura;
import com.rubik.tmodel.TModelPartidaObjectBase;
import java.awt.Dialog;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.filechooser.FileFilter;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;
import org.w3c.dom.Document;
import org.w3c.dom.NamedNodeMap;

/**
 *
 * @author GrucasDev
 */
public class Main extends javax.swing.JDialog {
    
    static Vector<FacturaImpresion> factura_impresion = new Vector<>(); 

    Factura factura = new Factura();
    ArrayList<PartidaObjectBase> partidas = new ArrayList<>();
    
    ArrayList<Receptor> clientes = new ArrayList<>();
    ArrayList<Factura> facturas_anteriores = new ArrayList<>();
    
    String path_logo = "Logotipo/";

    /**
     * Creates new form Main
     */
    
    public Main (){
        
    }
    
    public Main(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        createFiles();
        fillPartidas();
        
        loadClientes();
        loadEmisor();
        loadFacturas();
        
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblFacturas = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        txtReceptorRFC = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        txtReceptorNombre = new javax.swing.JTextField();
        txtReceptorCalle = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        txtReceptorNoInterior = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        txtReceptorNoExterior = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        txtReceptorCP = new javax.swing.JTextField();
        jLabel31 = new javax.swing.JLabel();
        txtReceptorMunicipio = new javax.swing.JTextField();
        jLabel32 = new javax.swing.JLabel();
        txtReceptorColonia = new javax.swing.JTextField();
        jLabel33 = new javax.swing.JLabel();
        txtReceptorEstado = new javax.swing.JTextField();
        jLabel34 = new javax.swing.JLabel();
        txtReceptorPais = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtSerie = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        txtFactura = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblPartidas = new javax.swing.JTable();
        btnDelPartida = new javax.swing.JButton();
        btnAddPartida = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        txtComentarios = new javax.swing.JTextField();
        jLabel37 = new javax.swing.JLabel();
        txtLugarFechaExpedicion = new javax.swing.JTextField();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        txtCuentaPago = new javax.swing.JTextField();
        txtCondicionesPago = new javax.swing.JTextField();
        jLabel50 = new javax.swing.JLabel();
        jLabel51 = new javax.swing.JLabel();
        jLabel52 = new javax.swing.JLabel();
        jLabel53 = new javax.swing.JLabel();
        jLabel54 = new javax.swing.JLabel();
        txtImporte = new javax.swing.JTextField();
        txtDescuento = new javax.swing.JTextField();
        txtSubtotal = new javax.swing.JTextField();
        txtIVA = new javax.swing.JTextField();
        txtTotal = new javax.swing.JTextField();
        txtTipoComprobante = new javax.swing.JTextField();
        txtFormaPago = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        txtMetodoPago = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtEmisorRFC = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtEmisorNombre = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        btnCargarExcel = new javax.swing.JButton();
        btnImprimir = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        txtEmisorCP = new javax.swing.JTextField();
        txtEmisorNoExterior = new javax.swing.JTextField();
        txtEmisorNoInterior = new javax.swing.JTextField();
        txtEmisorCalle = new javax.swing.JTextField();
        txtEmisorMunicipio = new javax.swing.JTextField();
        txtEmisorColonia = new javax.swing.JTextField();
        txtEmisorEstado = new javax.swing.JTextField();
        txtEmisorPais = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtRegimen = new javax.swing.JTextField();
        chkVersion = new javax.swing.JCheckBox();
        btnLimpiar = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel45 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        txtNoCertificado = new javax.swing.JTextField();
        txtCertificado = new javax.swing.JTextField();
        jLabel42 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        jLabel49 = new javax.swing.JLabel();
        txtSelloCFD = new javax.swing.JTextField();
        txtCertificadoSAT = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtSelloSAT = new javax.swing.JTextArea();
        txtUUID = new javax.swing.JTextField();
        txtFechaTimbrado = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtSello = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Facturas Anteriores"));

        jScrollPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jScrollPane1MouseClicked(evt);
            }
        });

        tblFacturas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblFacturas.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tblFacturas.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblFacturas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblFacturasMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblFacturas);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Nueva Factura"));

        jLabel1.setText("ID:");

        txtID.setEditable(false);

        jLabel25.setText("RFC:");

        txtReceptorRFC.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtReceptorRFCFocusLost(evt);
            }
        });

        jLabel26.setText("Nombre:");

        jLabel27.setText("Calle:");

        jLabel28.setText("No. Interior:");

        jLabel29.setText("No. Exterior:");

        jLabel30.setText("CP:");

        jLabel31.setText("Municipio:");

        jLabel32.setText("Colonia:");

        jLabel33.setText("Estado:");

        jLabel34.setText("Pais:");

        jLabel35.setText("Serie:");

        jLabel36.setText("Factura:");

        tblPartidas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblPartidas);

        btnDelPartida.setText("Eliminar Partida");
        btnDelPartida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelPartidaActionPerformed(evt);
            }
        });

        btnAddPartida.setText("Añadir Partida");
        btnAddPartida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPartidaActionPerformed(evt);
            }
        });

        jLabel13.setText("Comentarios:");

        jLabel37.setText("Lugar y fecha de Expedicion:");

        jLabel38.setText("Tipo:");

        jLabel39.setText("F Pago:");

        jLabel40.setText("Cuenta Pago:");

        jLabel41.setText("Condiciones Pago:");

        txtCondicionesPago.setText("CONTADO");

        jLabel50.setText("Importe:");

        jLabel51.setText("Descuento:");

        jLabel52.setText("Subtotal:");

        jLabel53.setText("IVA:");

        jLabel54.setText("Total:");

        txtImporte.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtImporte.setText("0.00");

        txtDescuento.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtDescuento.setText("0.00");

        txtSubtotal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtSubtotal.setText("0.00");

        txtIVA.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtIVA.setText("0.00");

        txtTotal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTotal.setText("0.00");

        jLabel14.setText("Met Pago:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel27)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtReceptorCalle, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel31)
                                    .addComponent(jLabel34))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtReceptorMunicipio)
                                    .addComponent(txtReceptorPais, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel32)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtReceptorColonia, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel33)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtReceptorEstado))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel28)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtReceptorNoInterior, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel29)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtReceptorNoExterior, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel30)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtReceptorCP, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                        .addComponent(btnAddPartida, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnDelPartida, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel25)
                            .addComponent(jLabel35))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(txtSerie, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel36)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtFactura))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(txtReceptorRFC, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel26)))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtReceptorNombre))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addGap(248, 248, 248)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(jLabel37))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel14)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtMetodoPago, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtLugarFechaExpedicion)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel50)
                                    .addComponent(jLabel52)
                                    .addComponent(jLabel51)
                                    .addComponent(jLabel53)
                                    .addComponent(jLabel54)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel39, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtFormaPago, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel40)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtImporte)
                                    .addComponent(txtCuentaPago)
                                    .addComponent(txtDescuento)
                                    .addComponent(txtSubtotal)
                                    .addComponent(txtIVA)
                                    .addComponent(txtTotal)))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel41)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCondicionesPago, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel38)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtTipoComprobante, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtComentarios, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel35)
                    .addComponent(txtSerie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel36)
                    .addComponent(txtFactura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addComponent(txtReceptorPais, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel25)
                            .addComponent(txtReceptorRFC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel26)
                            .addComponent(txtReceptorNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel29)
                            .addComponent(jLabel28)
                            .addComponent(jLabel30)
                            .addComponent(txtReceptorCP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtReceptorNoExterior, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel27)
                            .addComponent(txtReceptorNoInterior, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtReceptorCalle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel31)
                            .addComponent(jLabel32)
                            .addComponent(txtReceptorMunicipio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtReceptorColonia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel33)
                            .addComponent(txtReceptorEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel34)
                            .addComponent(btnDelPartida)
                            .addComponent(btnAddPartida))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel38)
                        .addComponent(txtTipoComprobante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel13)
                        .addComponent(txtComentarios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel37)
                    .addComponent(txtLugarFechaExpedicion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel39)
                    .addComponent(jLabel40)
                    .addComponent(txtCuentaPago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFormaPago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)
                    .addComponent(txtMetodoPago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel41)
                    .addComponent(txtCondicionesPago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel50)
                    .addComponent(txtImporte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDescuento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel51))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSubtotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel52))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel53)
                    .addComponent(txtIVA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel54)
                    .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Emisor:"));

        jLabel2.setText("RFC:");

        jLabel3.setText("Nombre:");

        jLabel4.setText("Calle:");

        jLabel5.setText("Pais:");

        btnCargarExcel.setText("Cargar de XML");
        btnCargarExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarExcelActionPerformed(evt);
            }
        });

        btnImprimir.setText("Imprimir PDF");
        btnImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirActionPerformed(evt);
            }
        });

        jLabel7.setText("No. Interior:");

        jLabel8.setText("No. Exterior:");

        jLabel9.setText("CP:");

        jLabel10.setText("Colonia:");

        jLabel11.setText("Municipio:");

        jLabel12.setText("Estado:");

        jLabel6.setText("Regimen:");

        chkVersion.setSelected(true);
        chkVersion.setText("Version XML 3.0");

        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtEmisorCalle, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel11)
                                    .addComponent(jLabel5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtEmisorMunicipio)
                                    .addComponent(txtEmisorPais))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtEmisorColonia, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtEmisorEstado))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtEmisorNoInterior, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtEmisorNoExterior, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtEmisorCP, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtRegimen))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtEmisorRFC, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtEmisorNombre))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(btnImprimir)
                        .addGap(15, 15, 15)
                        .addComponent(btnCargarExcel)
                        .addGap(15, 15, 15)
                        .addComponent(btnLimpiar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(chkVersion)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtEmisorRFC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(txtEmisorNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(jLabel7)
                            .addComponent(jLabel9)
                            .addComponent(txtEmisorCP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtEmisorNoExterior, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(txtEmisorNoInterior, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtEmisorCalle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(jLabel10)
                            .addComponent(txtEmisorMunicipio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtEmisorColonia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12)
                            .addComponent(txtEmisorEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel5))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtEmisorPais, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addComponent(txtRegimen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCargarExcel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(chkVersion)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        jLabel45.setText("No. Certificado:");

        jLabel46.setText("Sello:");

        jLabel47.setText("Certificado:");

        jLabel42.setText("UUID:");

        jLabel43.setText("Fecha Timbrado:");

        jLabel44.setText("Sello CDF:");

        jLabel48.setText("Certificado SAT:");

        jLabel49.setText("Sello SAT:");

        txtSelloSAT.setColumns(20);
        txtSelloSAT.setLineWrap(true);
        txtSelloSAT.setRows(5);
        jScrollPane3.setViewportView(txtSelloSAT);

        txtSello.setColumns(20);
        txtSello.setLineWrap(true);
        txtSello.setRows(5);
        jScrollPane4.setViewportView(txtSello);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel45)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNoCertificado))
                    .addComponent(jScrollPane3)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel47)
                            .addComponent(jLabel42))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtCertificado)
                            .addComponent(txtUUID)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel48)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtCertificadoSAT, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtSelloCFD)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel43)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFechaTimbrado))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel49)
                            .addComponent(jLabel44))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel46)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane4)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNoCertificado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel45))
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jLabel46))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(7, 7, 7)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel47)
                    .addComponent(txtCertificado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel42)
                    .addComponent(txtUUID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel43)
                    .addComponent(txtFechaTimbrado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel44)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtSelloCFD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCertificadoSAT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel48))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel49)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCargarExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarExcelActionPerformed
        JFileChooser fchooser = new JFileChooser();
        FileFilter xlsxFilter = new FileTypeFilter(".xml", " xml files (*.xml)");
        fchooser.addChoosableFileFilter(xlsxFilter);
        fchooser.setAcceptAllFileFilterUsed(true);
        fchooser.setDialogTitle("Seleccione la factura en XML.");
        int result = fchooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {

            File XML_File = fchooser.getSelectedFile();

            System.out.println("FILE:" + XML_File.getAbsolutePath());
            try {
                
                factura = new Factura();
                
                if (chkVersion.isSelected()) {
                    fillFormFromObject(parseV3(XML_File));
                } else {
                    fillFormFromObject(parseV2(XML_File));
                }

            } catch (Exception e) {
                factura = null;
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnCargarExcelActionPerformed

    private void btnDelPartidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelPartidaActionPerformed
        if (tblPartidas.getSelectedRow() != -1) {
            if (ManageDialogsSwing.questionMessage("Atencion", "¿Desea eliminar la partida seleccionada?")) {

                partidas.remove(tblPartidas.getSelectedRow());
                fillPartidas();
            }
        } else {
            ManageDialogsSwing.messageDialog("ERROR", "Debe seleccionar un registro para eliminarlo.");
        }
    }//GEN-LAST:event_btnDelPartidaActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        clearForm();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirActionPerformed
        
        factura_impresion = new Vector<>();
        
        if (ManageDialogsSwing.questionMessage("Atencion", "¿Desea guardar la informacion e imprimir la factura?")) {
            fillObjectFromForm();
            saveEmisor();
            saveClientes();
//            saveFactura();
            convertBeanToPrint();
            printFactura();
            clearForm();
        }

    }//GEN-LAST:event_btnImprimirActionPerformed

    private void txtReceptorRFCFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtReceptorRFCFocusLost
        
        String rfc = txtReceptorRFC.getText();
        
        Clientes:
        for (Receptor cliente : clientes) {
            if(rfc.equals(cliente.getReceptor_rfc())){
                txtReceptorRFC.setText(cliente.getReceptor_rfc());
                txtReceptorNombre.setText(cliente.getReceptor_nombre());
                txtReceptorNoInterior.setText(cliente.getReceptor_numero_interior());
                txtReceptorNoExterior.setText(cliente.getReceptor_numero_exterior());
                txtReceptorCalle.setText(cliente.getReceptor_calle());
                txtReceptorCP.setText(cliente.getReceptor_codigo_postal());
                txtReceptorColonia.setText(cliente.getReceptor_colonia());
                txtReceptorEstado.setText(cliente.getReceptor_estado());
                txtReceptorMunicipio.setText(cliente.getReceptor_municipio());
                txtReceptorPais.setText(cliente.getReceptor_pais());
                break Clientes;
            }
        }
        
    }//GEN-LAST:event_txtReceptorRFCFocusLost

    private void tblFacturasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblFacturasMouseClicked

        if (tblFacturas.getSelectedRow() != -1) {

            factura = facturas_anteriores.get(tblFacturas.getSelectedRow());
            fillFormFromObject(factura);

        } else {
        }   
        
    }//GEN-LAST:event_tblFacturasMouseClicked

    private void btnAddPartidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddPartidaActionPerformed

        PartidaObjectBase partidaTemp = new PartidaObjectBase();
        
        PartidasForm productosFormDialog = new PartidasForm(null, true, partidaTemp);
//        productosFormDialog.setVisible(true);
        productosFormDialog.addWindowListener(new WindowListener() {
            
            @Override
            public void windowClosing(WindowEvent e)
            {
            }

            @Override
            public void windowOpened(WindowEvent e) {
            }

            @Override
            public void windowClosed(WindowEvent e) {
                
                if(partidaTemp != null){
                    partidas.add(partidaTemp);
                    fillPartidas();                    
                }
            }

            @Override
            public void windowIconified(WindowEvent e) {
            }

            @Override
            public void windowDeiconified(WindowEvent e) {
            }

            @Override
            public void windowActivated(WindowEvent e) {
            }

            @Override
            public void windowDeactivated(WindowEvent e) {
            }
            
        });


        
    }//GEN-LAST:event_btnAddPartidaActionPerformed

    private void jScrollPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jScrollPane1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
                try {
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InstantiationException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IllegalAccessException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                } catch (UnsupportedLookAndFeelException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                Main dialog = new Main(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddPartida;
    private javax.swing.JButton btnCargarExcel;
    private javax.swing.JButton btnDelPartida;
    private javax.swing.JButton btnImprimir;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JCheckBox chkVersion;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable tblFacturas;
    private javax.swing.JTable tblPartidas;
    private javax.swing.JTextField txtCertificado;
    private javax.swing.JTextField txtCertificadoSAT;
    private javax.swing.JTextField txtComentarios;
    private javax.swing.JTextField txtCondicionesPago;
    private javax.swing.JTextField txtCuentaPago;
    private javax.swing.JTextField txtDescuento;
    private javax.swing.JTextField txtEmisorCP;
    private javax.swing.JTextField txtEmisorCalle;
    private javax.swing.JTextField txtEmisorColonia;
    private javax.swing.JTextField txtEmisorEstado;
    private javax.swing.JTextField txtEmisorMunicipio;
    private javax.swing.JTextField txtEmisorNoExterior;
    private javax.swing.JTextField txtEmisorNoInterior;
    private javax.swing.JTextField txtEmisorNombre;
    private javax.swing.JTextField txtEmisorPais;
    private javax.swing.JTextField txtEmisorRFC;
    private javax.swing.JTextField txtFactura;
    private javax.swing.JTextField txtFechaTimbrado;
    private javax.swing.JTextField txtFormaPago;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtIVA;
    private javax.swing.JTextField txtImporte;
    private javax.swing.JTextField txtLugarFechaExpedicion;
    private javax.swing.JTextField txtMetodoPago;
    private javax.swing.JTextField txtNoCertificado;
    private javax.swing.JTextField txtReceptorCP;
    private javax.swing.JTextField txtReceptorCalle;
    private javax.swing.JTextField txtReceptorColonia;
    private javax.swing.JTextField txtReceptorEstado;
    private javax.swing.JTextField txtReceptorMunicipio;
    private javax.swing.JTextField txtReceptorNoExterior;
    private javax.swing.JTextField txtReceptorNoInterior;
    private javax.swing.JTextField txtReceptorNombre;
    private javax.swing.JTextField txtReceptorPais;
    private javax.swing.JTextField txtReceptorRFC;
    private javax.swing.JTextField txtRegimen;
    private javax.swing.JTextArea txtSello;
    private javax.swing.JTextField txtSelloCFD;
    private javax.swing.JTextArea txtSelloSAT;
    private javax.swing.JTextField txtSerie;
    private javax.swing.JTextField txtSubtotal;
    private javax.swing.JTextField txtTipoComprobante;
    private javax.swing.JTextField txtTotal;
    private javax.swing.JTextField txtUUID;
    // End of variables declaration//GEN-END:variables

    public void clearForm(){
        
        factura = new Factura();
        
        txtReceptorRFC.setText("");
        txtReceptorNombre.setText("");
        txtReceptorNoInterior.setText("");
        txtReceptorNoExterior.setText("");
        txtReceptorCalle.setText("");
        txtReceptorCP.setText("");
        txtReceptorColonia.setText("");
        txtReceptorEstado.setText("");
        txtReceptorMunicipio.setText("");
        txtReceptorPais.setText("");
        
        txtNoCertificado.setText("");
        txtSello.setText("");
        txtCertificado.setText("");
        txtLugarFechaExpedicion.setText("");
        txtTipoComprobante.setText("");
        txtFormaPago.setText("");
        txtCuentaPago.setText("");
        txtCondicionesPago.setText("CONTADO");
        txtMetodoPago.setText("");
        
        txtSubtotal.setText("0.00");
        txtTotal.setText("0.00");
        txtIVA.setText("0.00");
        txtDescuento.setText("0.00");
        txtImporte.setText("0.00");
        
        txtUUID.setText("");
        txtFechaTimbrado.setText("");
        txtSelloCFD.setText("");
        txtCertificadoSAT.setText("");
        txtSelloSAT.setText("");

        TModelPartidaObjectBase tmodelPart = new TModelPartidaObjectBase();
        tmodelPart.setValues(new ArrayList<PartidaObjectBase>());
        tmodelPart.fireTableDataChanged();
        tblPartidas.setModel(tmodelPart);
        tblPartidas.updateUI();
        
        TModelFactura tmodel = new TModelFactura();
        tmodel.setValues(facturas_anteriores);
        tmodel.fireTableDataChanged();
        tblFacturas.setModel(tmodel);
        tblFacturas.updateUI();
        
        txtID.setText((facturas_anteriores.size()+1)+"");
    }
    
    public void fillObjectFromForm(){
                
        factura.setId(Integer.parseInt(txtID.getText()));
        factura.setSerie(txtSerie.getText());
        factura.setFolio(txtFactura.getText());
        factura.setEmisor_rfc(txtEmisorRFC.getText());
        factura.setEmisor_nombre(txtEmisorNombre.getText());
        factura.setEmisor_numero_interior(txtEmisorNoInterior.getText());
        factura.setEmisor_numero_exterior(txtEmisorNoExterior.getText());
        factura.setEmisor_calle(txtEmisorCalle.getText());
        factura.setEmisor_codigo_postal(txtEmisorCP.getText());
        factura.setEmisor_colonia(txtEmisorColonia.getText());
        factura.setEmisor_estado(txtEmisorEstado.getText());
        factura.setEmisor_municipio(txtEmisorMunicipio.getText());
        factura.setEmisor_pais(txtEmisorPais.getText());
        factura.setRegimen(txtRegimen.getText());
        
	factura.setReceptor_rfc(txtReceptorRFC.getText());
        factura.setReceptor_nombre(txtReceptorNombre.getText());
        factura.setReceptor_numero_interior(txtReceptorNoInterior.getText());
        factura.setReceptor_numero_exterior(txtReceptorNoExterior.getText());
        factura.setReceptor_calle(txtReceptorCalle.getText());
        factura.setReceptor_codigo_postal(txtReceptorCP.getText());
        factura.setReceptor_colonia(txtReceptorColonia.getText());
        factura.setReceptor_estado(txtReceptorEstado.getText());
        factura.setReceptor_municipio(txtReceptorMunicipio.getText());
        factura.setReceptor_pais(txtReceptorPais.getText());
        
        factura.setNo_certificado(txtNoCertificado.getText());
        factura.setSello(txtSello.getText());
        factura.setCertificado(txtCertificado.getText());
        factura.setLugar_expedicion(txtLugarFechaExpedicion.getText());
        factura.setTipo_comprobante(txtTipoComprobante.getText());
        factura.setForma_pago(txtFormaPago.getText());
        factura.setNumero_cuenta_pago(txtCuentaPago.getText());
        factura.setCondificones_pago(txtCondicionesPago.getText());
        factura.setMetodo_pago(txtMetodoPago.getText());
        
        factura.setSubtotal(new Double(txtSubtotal.getText()));
        factura.setTotal(new Double(txtTotal.getText()));
        
        factura.setIva(new Double(txtIVA.getText()));
        factura.setUUID(txtUUID.getText());
        factura.setFecha_timbrado(txtFechaTimbrado.getText());
        factura.setSello_CFD(txtSelloCFD.getText());
        factura.setNo_certificadoSAT(txtCertificadoSAT.getText());
        factura.setSelloSAT(txtSelloSAT.getText());
        
        factura.setPartidas(partidas);
        
    }
    
    public void fillFormFromObject(Factura f){
        
        txtEmisorRFC.setText(f.getEmisor_rfc());
        txtEmisorNombre.setText(f.getEmisor_nombre());
        txtEmisorNoInterior.setText(f.getEmisor_numero_interior());
        txtEmisorNoExterior.setText(f.getEmisor_numero_exterior());
        txtEmisorCalle.setText(f.getEmisor_calle());
        txtEmisorCP.setText(f.getEmisor_codigo_postal());
        txtEmisorColonia.setText(f.getEmisor_colonia());
        txtEmisorEstado.setText(f.getEmisor_estado());
        txtEmisorMunicipio.setText(f.getEmisor_municipio());
        txtEmisorPais.setText(f.getEmisor_pais());
        txtRegimen.setText(f.getRegimen());
        
        txtReceptorRFC.setText(f.getReceptor_rfc());
        txtReceptorNombre.setText(f.getReceptor_nombre());
        txtReceptorNoInterior.setText(f.getReceptor_numero_interior());
        txtReceptorNoExterior.setText(f.getReceptor_numero_exterior());
        txtReceptorCalle.setText(f.getReceptor_calle());
        txtReceptorCP.setText(f.getReceptor_codigo_postal());
        txtReceptorColonia.setText(f.getReceptor_colonia());
        txtReceptorEstado.setText(f.getReceptor_estado());
        txtReceptorMunicipio.setText(f.getReceptor_municipio());
        txtReceptorPais.setText(f.getReceptor_pais());
        
        txtNoCertificado.setText(f.getNo_certificado());
        txtSello.setText(f.getSello());
        txtCertificado.setText(f.getCertificado());
        txtLugarFechaExpedicion.setText(f.getLugar_expedicion() + ", " + f.getFecha_emision());
        txtTipoComprobante.setText(f.getTipo_comprobante().toUpperCase());
        txtFormaPago.setText(f.getForma_pago().toUpperCase());
        txtCuentaPago.setText(f.getNumero_cuenta_pago().toUpperCase());
        txtCondicionesPago.setText(f.getCondificones_pago().toUpperCase());
        txtMetodoPago.setText(f.getMetodo_pago());
        
        txtSubtotal.setText(f.getSubtotal().toString());
        txtTotal.setText(f.getTotal().toString());
        
        txtIVA.setText(f.getIva().toString());
        txtUUID.setText(f.getUUID());
        txtFechaTimbrado.setText(f.getFecha_timbrado());
        txtSelloCFD.setText(f.getSello_CFD());
        txtCertificadoSAT.setText(f.getNo_certificadoSAT());
        txtSelloSAT.setText(f.getSelloSAT());
        
        if(txtImporte.getText().equals("0.00")){
            txtImporte.setText(f.getSubtotal().toString());
        }
        
        if(txtCondicionesPago.getText().equals("")){
            txtCondicionesPago.setText("CONTADO");
        }
        
        partidas = factura.getPartidas();
        
        fillPartidas();
        
    }
    
    public Factura parseV2(File xml) {
        factura = new Factura();

        try {
            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
            Document doc = dBuilder.parse(xml);
            doc.getDocumentElement().normalize();

            NamedNodeMap nodeMapComprobante = doc.getElementsByTagName("cfdi:Comprobante").item(0).getAttributes();
            NamedNodeMap nodeMapEmisor = doc.getElementsByTagName("cfdi:Emisor").item(0).getAttributes();
            NamedNodeMap nodeMapEmisor_DomicilioFiscal = doc.getElementsByTagName("cfdi:DomicilioFiscal").item(0).getAttributes();
            NamedNodeMap nodeMapEmisor_RegimenFiscal = doc.getElementsByTagName("cfdi:RegimenFiscal").item(0).getAttributes();
            NamedNodeMap nodeMapReceptor = doc.getElementsByTagName("cfdi:Receptor").item(0).getAttributes();
            NamedNodeMap nodeMapReceptor_Domicilio = doc.getElementsByTagName("cfdi:Domicilio").item(0).getAttributes();
            NamedNodeMap nodeMapImpuestos = doc.getElementsByTagName("cfdi:Impuestos").item(0).getAttributes();
            NamedNodeMap nodeMapImpuesto = doc.getElementsByTagName("cfdi:Traslado").item(0).getAttributes();
            NamedNodeMap nodeMapFolioFiscal = doc.getElementsByTagName("tfd:TimbreFiscalDigital").item(0).getAttributes();

            factura.setNo_certificado((nodeMapComprobante.getNamedItem("noCertificado") == null) ? "" : nodeMapComprobante.getNamedItem("noCertificado").getTextContent());
            factura.setSello((nodeMapComprobante.getNamedItem("sello") == null) ? "" : nodeMapComprobante.getNamedItem("sello").getTextContent());
            factura.setCertificado((nodeMapComprobante.getNamedItem("certificado") == null) ? "" : nodeMapComprobante.getNamedItem("certificado").getTextContent());
            factura.setFecha_emision((nodeMapComprobante.getNamedItem("fecha") == null) ? "" : nodeMapComprobante.getNamedItem("fecha").getTextContent());
            factura.setLugar_expedicion((nodeMapComprobante.getNamedItem("LugarExpedicion") == null) ? "" : nodeMapComprobante.getNamedItem("LugarExpedicion").getTextContent());
            factura.setTipo_comprobante((nodeMapComprobante.getNamedItem("tipoDeComprobante") == null) ? "" : nodeMapComprobante.getNamedItem("tipoDeComprobante").getTextContent());
            factura.setForma_pago((nodeMapComprobante.getNamedItem("formaDePago") == null) ? "" : nodeMapComprobante.getNamedItem("formaDePago").getTextContent());
            factura.setMetodo_pago((nodeMapComprobante.getNamedItem("metodoDePago") == null) ? "" : nodeMapComprobante.getNamedItem("metodoDePago").getTextContent());
            factura.setNumero_cuenta_pago((nodeMapComprobante.getNamedItem("NumCtaPago") == null) ? "" : nodeMapComprobante.getNamedItem("NumCtaPago").getTextContent());
            factura.setCondificones_pago((nodeMapComprobante.getNamedItem("condicionesDePago") == null) ? "" : nodeMapComprobante.getNamedItem("condicionesDePago").getTextContent());
            factura.setSubtotal(new Double((nodeMapComprobante.getNamedItem("subTotal") == null) ? "" : nodeMapComprobante.getNamedItem("subTotal").getTextContent()));
            factura.setTotal(new Double((nodeMapComprobante.getNamedItem("total") == null) ? "" : nodeMapComprobante.getNamedItem("total").getTextContent()));
            
            factura.setEmisor_rfc((nodeMapEmisor.getNamedItem("rfc") == null) ? "" : nodeMapEmisor.getNamedItem("rfc").getTextContent());
            factura.setEmisor_nombre((nodeMapEmisor.getNamedItem("nombre") == null) ? "" : nodeMapEmisor.getNamedItem("nombre").getTextContent());

            factura.setEmisor_calle((nodeMapEmisor_DomicilioFiscal.getNamedItem("calle") == null) ? "" : nodeMapEmisor_DomicilioFiscal.getNamedItem("calle").getTextContent());
            factura.setEmisor_numero_exterior((nodeMapEmisor_DomicilioFiscal.getNamedItem("noExterior") == null) ? "" : nodeMapEmisor_DomicilioFiscal.getNamedItem("noExterior").getTextContent());
            factura.setEmisor_numero_interior((nodeMapEmisor_DomicilioFiscal.getNamedItem("noInterior") == null) ? "" : nodeMapEmisor_DomicilioFiscal.getNamedItem("noInterior").getTextContent());
            factura.setEmisor_codigo_postal((nodeMapEmisor_DomicilioFiscal.getNamedItem("codigoPostal") == null) ? "" : nodeMapEmisor_DomicilioFiscal.getNamedItem("codigoPostal").getTextContent());
            factura.setEmisor_colonia((nodeMapEmisor_DomicilioFiscal.getNamedItem("colonia") == null) ? "" : nodeMapEmisor_DomicilioFiscal.getNamedItem("colonia").getTextContent());
            factura.setEmisor_municipio((nodeMapEmisor_DomicilioFiscal.getNamedItem("municipio") == null) ? "" : nodeMapEmisor_DomicilioFiscal.getNamedItem("municipio").getTextContent());
            factura.setEmisor_estado((nodeMapEmisor_DomicilioFiscal.getNamedItem("estado") == null) ? "" : nodeMapEmisor_DomicilioFiscal.getNamedItem("estado").getTextContent());
            factura.setEmisor_pais((nodeMapEmisor_DomicilioFiscal.getNamedItem("pais") == null) ? "" : nodeMapEmisor_DomicilioFiscal.getNamedItem("pais").getTextContent());

            factura.setRegimen((nodeMapEmisor_RegimenFiscal.getNamedItem("Regimen") == null) ? "" : nodeMapEmisor_RegimenFiscal.getNamedItem("Regimen").getTextContent());

            factura.setReceptor_rfc((nodeMapReceptor.getNamedItem("rfc") == null) ? "" : nodeMapReceptor.getNamedItem("rfc").getTextContent());
            factura.setReceptor_nombre((nodeMapReceptor.getNamedItem("nombre") == null) ? "" : nodeMapReceptor.getNamedItem("nombre").getTextContent());
            factura.setReceptor_calle((nodeMapReceptor_Domicilio.getNamedItem("calle") == null) ? "" : nodeMapReceptor_Domicilio.getNamedItem("calle").getTextContent());
            factura.setReceptor_numero_exterior((nodeMapReceptor_Domicilio.getNamedItem("noExterior") == null) ? "" : nodeMapReceptor_Domicilio.getNamedItem("noExterior").getTextContent());
            factura.setReceptor_numero_interior((nodeMapReceptor_Domicilio.getNamedItem("noInterior") == null) ? "" : nodeMapReceptor_Domicilio.getNamedItem("noInterior").getTextContent());
            factura.setReceptor_codigo_postal((nodeMapReceptor_Domicilio.getNamedItem("codigoPostal") == null) ? "" : nodeMapReceptor_Domicilio.getNamedItem("codigoPostal").getTextContent());
            factura.setReceptor_colonia((nodeMapReceptor_Domicilio.getNamedItem("colonia") == null) ? "" : nodeMapReceptor_Domicilio.getNamedItem("colonia").getTextContent());
            factura.setReceptor_municipio((nodeMapReceptor_Domicilio.getNamedItem("municipio") == null) ? "" : nodeMapReceptor_Domicilio.getNamedItem("municipio").getTextContent());
            factura.setReceptor_estado((nodeMapReceptor_Domicilio.getNamedItem("estado") == null) ? "" : nodeMapReceptor_Domicilio.getNamedItem("estado").getTextContent());
            factura.setReceptor_pais((nodeMapReceptor_Domicilio.getNamedItem("pais") == null) ? "" : nodeMapReceptor_Domicilio.getNamedItem("pais").getTextContent());

            Double por_iva = new Double((nodeMapImpuesto.getNamedItem("tasa") == null) ? "0.0" : nodeMapImpuesto.getNamedItem("tasa").getTextContent());
            
            factura.setIva(new Double((nodeMapImpuestos.getNamedItem("totalImpuestosTrasladados") == null) ? "" : nodeMapImpuestos.getNamedItem("totalImpuestosTrasladados").getTextContent()));
            factura.setPorc_iva(ManageNumbers.stringToInteger( (por_iva*100)+"" ));
            //f.setIva((nodeMapImpuesto.getNamedItem("impuesto") == null) ? "" : nodeMapImpuesto.getNamedItem("impuesto").getTextContent());

            factura.setUUID((nodeMapFolioFiscal.getNamedItem("UUID") == null) ? "" : nodeMapFolioFiscal.getNamedItem("UUID").getTextContent());
            factura.setFecha_timbrado((nodeMapFolioFiscal.getNamedItem("FechaTimbrado") == null) ? "" : nodeMapFolioFiscal.getNamedItem("FechaTimbrado").getTextContent());
            factura.setSello_CFD((nodeMapFolioFiscal.getNamedItem("selloCFD") == null) ? "" : nodeMapFolioFiscal.getNamedItem("selloCFD").getTextContent());
            factura.setNo_certificadoSAT((nodeMapFolioFiscal.getNamedItem("noCertificadoSAT") == null) ? "" : nodeMapFolioFiscal.getNamedItem("noCertificadoSAT").getTextContent());
            factura.setSelloSAT((nodeMapFolioFiscal.getNamedItem("selloSAT") == null) ? "" : nodeMapFolioFiscal.getNamedItem("selloSAT").getTextContent());

            NumberToText n = new NumberToText();
            Integer total = factura.getTotal().intValue();
            factura.setImporte_letra(n.convertirLetras(total).toUpperCase());
            
            // Paratidas
            partidas = new ArrayList<>();
            
            for (int i = 0; i < doc.getElementsByTagName("cfdi:Concepto").getLength(); i++) {
                
                NamedNodeMap nodeMapConcepto = doc.getElementsByTagName("cfdi:Concepto").item(i).getAttributes();
                
                PartidaObjectBase p = new PartidaObjectBase();
                p.setCantidad(ManageNumbers.stringToInteger((nodeMapConcepto.getNamedItem("cantidad") == null) ? "" : nodeMapConcepto.getNamedItem("cantidad").getTextContent()));
                p.setUnidad_medida((nodeMapConcepto.getNamedItem("unidad") == null) ? "" : nodeMapConcepto.getNamedItem("unidad").getTextContent());
                p.setDescripcion((nodeMapConcepto.getNamedItem("descripcion") == null) ? "" : nodeMapConcepto.getNamedItem("descripcion").getTextContent());
                p.setPrecio_unitario(new Double((nodeMapConcepto.getNamedItem("valorUnitario") == null) ? "" : nodeMapConcepto.getNamedItem("valorUnitario").getTextContent()));
                p.setTotal(new Double((nodeMapConcepto.getNamedItem("importe")==null)?"":nodeMapConcepto.getNamedItem("importe").getTextContent()));
            
                partidas.add(p);
            }
            
            fillPartidas();
            factura.setPartidas(partidas);
            
        } catch (Exception e) {
            e.printStackTrace();
            ManageDialogsSwing.errorMessage("ERROR","Error al cargar el XML.");
        }

        return factura;
    }
    
    public Factura parseV3(File xml) {

        factura = new Factura();

        try {
            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
            Document doc = dBuilder.parse(xml);
            doc.getDocumentElement().normalize();

            NamedNodeMap nodeMapComprobante = doc.getElementsByTagName("cfdi:Comprobante").item(0).getAttributes();
            NamedNodeMap nodeMapEmisor = doc.getElementsByTagName("cfdi:Emisor").item(0).getAttributes();
            NamedNodeMap nodeMapReceptor = doc.getElementsByTagName("cfdi:Receptor").item(0).getAttributes();
            NamedNodeMap nodeMapImpuestos = doc.getElementsByTagName("cfdi:Impuestos").item(0).getAttributes();
            NamedNodeMap nodeMapImpuesto = doc.getElementsByTagName("cfdi:Traslado").item(0).getAttributes();
            NamedNodeMap nodeMapFolioFiscal = doc.getElementsByTagName("tfd:TimbreFiscalDigital").item(0).getAttributes();

            factura.setNo_certificado((nodeMapComprobante.getNamedItem("NoCertificado") == null) ? "" : nodeMapComprobante.getNamedItem("NoCertificado").getTextContent());
            factura.setSello((nodeMapComprobante.getNamedItem("Sello") == null) ? "" : nodeMapComprobante.getNamedItem("Sello").getTextContent());
            factura.setCertificado((nodeMapComprobante.getNamedItem("Certificado") == null) ? "" : nodeMapComprobante.getNamedItem("Certificado").getTextContent());
            factura.setFecha_emision((nodeMapComprobante.getNamedItem("Fecha") == null) ? "" : nodeMapComprobante.getNamedItem("Fecha").getTextContent());
            
            factura.setLugar_expedicion((nodeMapComprobante.getNamedItem("LugarExpedicion") == null) ? "" : nodeMapComprobante.getNamedItem("LugarExpedicion").getTextContent());
            factura.setLugar_expedicion("");
            
            factura.setTipo_comprobante((nodeMapComprobante.getNamedItem("TipoDeComprobante") == null) ? "" : nodeMapComprobante.getNamedItem("TipoDeComprobante").getTextContent());
            if(factura.getTipo_comprobante().equals("I")){
                factura.setTipo_comprobante("INGRESO");
            } else {
                factura.setTipo_comprobante("EGRESO");
            }   
            
            factura.setForma_pago((nodeMapComprobante.getNamedItem("FormaPago") == null) ? "" : nodeMapComprobante.getNamedItem("FormaPago").getTextContent());
            switch (factura.getForma_pago()){
                case "01": {
                    factura.setForma_pago("EFECTIVO");
                    break;
                }
                
                case "02": {
                    factura.setForma_pago("CHEQUE NOMINATIVO");
                    break;
                }
                
                case "03": {
                    factura.setForma_pago("TRANSFERENCIA ELECTRÓNICA DE FONDOS");
                    break;
                }
                
                default: {
                    factura.setForma_pago("EFECTIVO");
                    break;
                }
            }
            
            factura.setMetodo_pago((nodeMapComprobante.getNamedItem("MetodoPago") == null) ? "" : nodeMapComprobante.getNamedItem("MetodoPago").getTextContent());
            switch (factura.getMetodo_pago()){
                case "PUE": {
                    factura.setMetodo_pago("Pago en una sola exhibición");
                    break;
                }
                
                case "PPD": {
                    factura.setMetodo_pago("Pago en parcialidades o diferido.");
                    break;
                }
                
                default: {
                    factura.setMetodo_pago("Pago en una sola exhibición");
                    break;
                }
            }
            
            factura.setNumero_cuenta_pago((nodeMapComprobante.getNamedItem("NumCtaPago") == null) ? "" : nodeMapComprobante.getNamedItem("NumCtaPago").getTextContent());
            factura.setCondificones_pago((nodeMapComprobante.getNamedItem("CondicionesDePago") == null) ? "" : nodeMapComprobante.getNamedItem("CondicionesDePago").getTextContent());
            factura.setSubtotal(new Double((nodeMapComprobante.getNamedItem("SubTotal") == null) ? "" : nodeMapComprobante.getNamedItem("SubTotal").getTextContent()));
            factura.setTotal(new Double((nodeMapComprobante.getNamedItem("Total") == null) ? "" : nodeMapComprobante.getNamedItem("Total").getTextContent()));

            factura.setEmisor_rfc((nodeMapEmisor.getNamedItem("Rfc") == null) ? "" : nodeMapEmisor.getNamedItem("Rfc").getTextContent());
            factura.setEmisor_nombre((nodeMapEmisor.getNamedItem("Nombre") == null) ? "" : nodeMapEmisor.getNamedItem("Nombre").getTextContent());
            factura.setRegimen((nodeMapEmisor.getNamedItem("RegimenFiscal") == null) ? "" : nodeMapEmisor.getNamedItem("RegimenFiscal").getTextContent());

            if(factura.getEmisor_rfc().equals(txtEmisorRFC.getText())){
                factura.setEmisor_rfc(txtEmisorRFC.getText());
                factura.setEmisor_nombre(txtEmisorNombre.getText());
                factura.setEmisor_numero_interior(txtEmisorNoInterior.getText());
                factura.setEmisor_numero_exterior(txtEmisorNoExterior.getText());
                factura.setEmisor_calle(txtEmisorCalle.getText());
                factura.setEmisor_codigo_postal(txtEmisorCP.getText());
                factura.setEmisor_colonia(txtEmisorColonia.getText());
                factura.setEmisor_estado(txtEmisorEstado.getText());
                factura.setEmisor_municipio(txtEmisorMunicipio.getText());
                factura.setEmisor_pais(txtEmisorPais.getText());
                factura.setRegimen(txtRegimen.getText());
            }

            
            switch (factura.getRegimen()){
                case "601": {
                    factura.setRegimen("General de Ley Personas Morales");
                    break;
                }
                
                case "603": {
                    factura.setRegimen("Personas Morales con Fines no Lucrativos");
                    break;
                }
                
                case "605": {
                    factura.setRegimen("Sueldos y Salarios e Ingresos Asimilados a Salarios");
                    break;
                }
                
                default: {
                    factura.setRegimen("General de Ley Personas Morales");
                    break;
                }
            }
            
            factura.setReceptor_rfc((nodeMapReceptor.getNamedItem("Rfc") == null) ? "" : nodeMapReceptor.getNamedItem("Rfc").getTextContent());
            factura.setReceptor_nombre((nodeMapReceptor.getNamedItem("Nombre") == null) ? "" : nodeMapReceptor.getNamedItem("Nombre").getTextContent());
            
            factura.setIva(
                    new Double(
                            (nodeMapImpuestos.getNamedItem("TotalImpuestosTrasladados") == null) ? "0.0" : 
                                    nodeMapImpuestos.getNamedItem("TotalImpuestosTrasladados").getTextContent()));
            
            Double porc_iva = new Double((nodeMapImpuesto.getNamedItem("TasaOCuota") == null) ? "0.0" : nodeMapImpuesto.getNamedItem("TasaOCuota").getTextContent());
            factura.setPorc_iva(ManageNumbers.stringToInteger( (porc_iva*100)+"" ));

            factura.setUUID((nodeMapFolioFiscal.getNamedItem("UUID") == null) ? "" : nodeMapFolioFiscal.getNamedItem("UUID").getTextContent());
            factura.setFecha_timbrado((nodeMapFolioFiscal.getNamedItem("FechaTimbrado") == null) ? "" : nodeMapFolioFiscal.getNamedItem("FechaTimbrado").getTextContent());
            factura.setSello_CFD((nodeMapFolioFiscal.getNamedItem("SelloCFD") == null) ? "" : nodeMapFolioFiscal.getNamedItem("SelloCFD").getTextContent());
            factura.setNo_certificadoSAT((nodeMapFolioFiscal.getNamedItem("NoCertificadoSAT") == null) ? "" : nodeMapFolioFiscal.getNamedItem("NoCertificadoSAT").getTextContent());
            factura.setSelloSAT((nodeMapFolioFiscal.getNamedItem("SelloSAT") == null) ? "" : nodeMapFolioFiscal.getNamedItem("SelloSAT").getTextContent());

            NumberToText n = new NumberToText();
            Integer total = factura.getTotal().intValue();
            factura.setImporte_letra(n.convertirLetras(total).toUpperCase());

            // Paratidas
            partidas = new ArrayList<>();
            
            for (int i = 0; i < doc.getElementsByTagName("cfdi:Concepto").getLength(); i++) {
                
                NamedNodeMap nodeMapConcepto = doc.getElementsByTagName("cfdi:Concepto").item(i).getAttributes();
                
                PartidaObjectBase p = new PartidaObjectBase();
                p.setCantidad(ManageNumbers.stringToInteger((nodeMapConcepto.getNamedItem("Cantidad") == null) ? "" : nodeMapConcepto.getNamedItem("Cantidad").getTextContent()));
                p.setUnidad_medida((nodeMapConcepto.getNamedItem("ClaveUnidad") == null) ? "" : nodeMapConcepto.getNamedItem("ClaveUnidad").getTextContent());
                p.setDescripcion((nodeMapConcepto.getNamedItem("Descripcion") == null) ? "" : nodeMapConcepto.getNamedItem("Descripcion").getTextContent());
                p.setPrecio_unitario(new Double((nodeMapConcepto.getNamedItem("ValorUnitario") == null) ? "" : nodeMapConcepto.getNamedItem("ValorUnitario").getTextContent()));
                p.setTotal(new Double((nodeMapConcepto.getNamedItem("Importe")==null)?"":nodeMapConcepto.getNamedItem("Importe").getTextContent()));
                
                partidas.add(p);
            }

            fillPartidas();
            factura.setPartidas(partidas);
            
        } catch (Exception e) {
            e.printStackTrace();
            ManageDialogsSwing.errorMessage("ERROR","Error al cargar el XML.");
        }

        return factura;
    }
    
    public void fillPartidas(){
        TModelPartidaObjectBase tmodel = new TModelPartidaObjectBase();
        tmodel.setValues(partidas);
        tmodel.fireTableDataChanged();
        tblPartidas.setModel(tmodel);
        tblPartidas.updateUI();
    }
    
    public void createFiles(){
        
        File clientes = new File("clientes.data");
        File emisor = new File("emisor.data");
        File facturas = new File("facturas.data");
        
        try {
            
            if (!clientes.exists()) {
                clientes.createNewFile();
            }

            if (!emisor.exists()) {
                emisor.createNewFile();
            }
            
            if (!facturas.exists()) {
                facturas.createNewFile();
            }
            
        } catch (IOException e) {
            ManageDialogsSwing.errorMessage("ERROR", "Error al crear los Archivos de configuracion.");
        }
        
    }
    
    public void loadEmisor(){
        File fEmisor = new File("emisor.data");
        Emisor emisor = (Emisor) RubikSerealize.readObject(fEmisor);
        
        if(emisor != null){
            
            txtEmisorRFC.setText(emisor.getEmisor_rfc());
            txtEmisorNombre.setText(emisor.getEmisor_nombre());
            txtEmisorNoInterior.setText(emisor.getEmisor_numero_interior());
            txtEmisorNoExterior.setText(emisor.getEmisor_numero_exterior());
            txtEmisorCalle.setText(emisor.getEmisor_calle());
            txtEmisorCP.setText(emisor.getEmisor_codigo_postal());
            txtEmisorColonia.setText(emisor.getEmisor_colonia());
            txtEmisorEstado.setText(emisor.getEmisor_estado());
            txtEmisorMunicipio.setText(emisor.getEmisor_municipio());
            txtEmisorPais.setText(emisor.getEmisor_pais());
            txtRegimen.setText(emisor.getRegimen());
            
        }
        
    }
    
    public void loadClientes(){
        File fClientes = new File("clientes.data");
        clientes = (ArrayList<Receptor>) RubikSerealize.readObject(fClientes);
        
        if(clientes == null){
            clientes =  new ArrayList<>();
        }
    }
    
    public void loadFacturas(){
        File ffacturas = new File("facturas.data");
        
        facturas_anteriores = (ArrayList<Factura>) RubikSerealize.readObject(ffacturas);
        
        if(facturas_anteriores == null){
            facturas_anteriores =  new ArrayList<>();
        }
        
        TModelFactura tmodel = new TModelFactura();
        tmodel.setValues(facturas_anteriores);
        tmodel.fireTableDataChanged();
        tblFacturas.setModel(tmodel);
        tblFacturas.updateUI();
        
        txtID.setText((facturas_anteriores.size()+1)+"");
        
    }
    
    public void saveEmisor(){
        
        File fEmisor = new File("emisor.data");
        
        RubikSerealize.clearObject(fEmisor);
        
        Emisor emisor  = new Emisor();
         
        emisor.setEmisor_rfc(txtEmisorRFC.getText());
        emisor.setEmisor_nombre(txtEmisorNombre.getText());
        emisor.setEmisor_numero_interior(txtEmisorNoInterior.getText());
        emisor.setEmisor_numero_exterior(txtEmisorNoExterior.getText());
        emisor.setEmisor_calle(txtEmisorCalle.getText());
        emisor.setEmisor_codigo_postal(txtEmisorCP.getText());
        emisor.setEmisor_colonia(txtEmisorColonia.getText());
        emisor.setEmisor_estado(txtEmisorEstado.getText());
        emisor.setEmisor_municipio(txtEmisorMunicipio.getText());
        emisor.setEmisor_pais(txtEmisorPais.getText());
        emisor.setRegimen(txtRegimen.getText());
        
        RubikSerealize.saveObject(fEmisor, emisor);
        
    }
    
    public void saveClientes(){
        
        File fClientes = new File("clientes.data");
        Receptor receptor = new Receptor();
        
        receptor.setReceptor_rfc(txtReceptorRFC.getText());
        receptor.setReceptor_nombre(txtReceptorNombre.getText());
        receptor.setReceptor_numero_interior(txtReceptorNoInterior.getText());
        receptor.setReceptor_numero_exterior(txtReceptorNoExterior.getText());
        receptor.setReceptor_calle(txtReceptorCalle.getText());
        receptor.setReceptor_codigo_postal(txtReceptorCP.getText());
        receptor.setReceptor_colonia(txtReceptorColonia.getText());
        receptor.setReceptor_estado(txtReceptorEstado.getText());
        receptor.setReceptor_municipio(txtReceptorMunicipio.getText());
        receptor.setReceptor_pais(txtReceptorPais.getText());
        
        Boolean clienteNuevo = true;
        
        for (Receptor cliente : clientes) {
            if(receptor.getReceptor_rfc().equals(cliente.getReceptor_rfc())){
                clienteNuevo = false; 
                break;
            }
        }
        
        if(clienteNuevo){
            RubikSerealize.clearObject(fClientes);
            clientes.add(receptor);
            RubikSerealize.saveObject(fClientes, clientes);
        }
        
    }
    
    public void saveFactura(){
        File ffacturas = new File("facturas.data");
        
        Boolean facturaNueva = true;
        
        for (Factura factAnterior : facturas_anteriores) {
            if(Objects.equals(factura.getId(), factAnterior.getId())){
                facturaNueva = false;
                break;
            }
        }
        
        System.out.println("Es Nueva : " + facturaNueva);
        
        if(facturaNueva){
            RubikSerealize.clearObject(ffacturas);
            
            facturas_anteriores.add(factura);
            RubikSerealize.saveObject(ffacturas, facturas_anteriores);
        }
        
        clearForm();
        loadFacturas();
        
        System.out.println("Facturas: " + facturas_anteriores.toString());
    }
    
    public void printFactura(){
       Map<String, Object> params = new HashMap<String, Object>();
  
        try {
            FileInputStream fis = new FileInputStream("reports/Factura.jasper");
            BufferedInputStream bufferedInputStream = new BufferedInputStream(fis);
            JasperReport reporte = (JasperReport) JRLoader.loadObject(bufferedInputStream);
            JasperPrint jasperPrint = JasperFillManager.fillReport(reporte,params, new JRBeanCollectionDataSource(factura_impresion));
       
            JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);
            
            Dialog dialog = new JDialog(this);
            dialog.add(jasperViewer.getContentPane());
            dialog.setSize(jasperViewer.getSize());
            dialog.setTitle("Factura");
            dialog.setLocationRelativeTo(null);
            dialog.setVisible(true);
   
        } catch (Exception ex) {
            ex.printStackTrace();
            String er  = "";
            for (int i = 0; i < ex.getStackTrace().length; i++) {
                er+= ex.getStackTrace()[i].toString() + "\n";
            }
            
            ManageDialogsSwing.errorMessage("Error", ex.toString());
            ManageDialogsSwing.errorMessage("Error", er);
        }
    }
    
    public void convertBeanToPrint(){
        for (int i = 0; i < partidas.size(); i++) {
            factura_impresion.add(new FacturaImpresion(factura,partidas.get(i)));
        }
    }
    
    public static Collection generateCollection(){
        return factura_impresion;
    }
    
}